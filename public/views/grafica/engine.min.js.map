{"version":3,"sources":["engine.js"],"names":["toRadians","angle","Math","PI","calculateArea","arreglo","areaActual","angulo","length","h","a","b","c","sqrt","pow","cos","s1","calculatePercentage","aristas","areaTotal","calculateAreaTotal","abs","array","i","calculateLevel","doc","p_total","level","ask","min","max","nivel","calculateEdges","data","labels","values","push","titulo","calculo1","parseInt","$","val","engine","window","module","exports"],"mappings":";AAAA,QAASA,WAAUC,GACjB,MAAOA,IAASC,KAAKC,GAAK,KAG5B,QAASC,eAAcC,GAGrB,IAAK,GAFDC,GAAa,EACbC,EAAS,IAAMF,EAAQG,OAClBC,EAAI,EAAGA,EAAIJ,EAAQG,OAAQC,IAAK,CACrC,GAAIC,GAAIL,EAAQI,GACZE,EAAIN,EAAQI,EAAI,EAChBA,GAAIJ,EAAQG,OAAS,GACrBE,EAAIL,EAAQI,GACZE,EAAIN,EAAQI,EAAI,KAEhBC,EAAIL,EAAQI,GACZE,EAAIN,EAAQ,GAEhB,IAAIO,GAAIV,KAAKW,KAAKX,KAAKY,IAAIJ,EAAG,GAAKR,KAAKY,IAAIH,EAAG,GAAK,EAAID,EAAIC,EAAIT,KAAKa,IAAIf,UAAUO,KAE/ES,GAAMN,EAAIC,EAAIC,GAAK,CAEvBN,IADWJ,KAAKW,KAAKG,GAAMA,EAAKN,IAAMM,EAAKL,IAAMK,EAAKJ,IAI1D,MAAON,GAGT,QAASW,qBAAoBX,EAAWY,GAEtC,GAAIC,GAAYC,mBAAmBF,EACnC,OAAO,KAAMhB,KAAKmB,KAAMf,EAAaa,GAAaA,EAAa,KAGjE,QAASC,oBAAmBF,GAE1B,IAAK,GADDI,MACKC,EAAI,EAAGA,EAAIL,EAASK,IAC3BD,EAAMC,GAAK,GAEb,OAAOnB,eAAckB,GAGvB,QAASE,gBAAeC,EAAKC,GAE3B,IAAK,GADDC,GACKJ,EAAI,EAAGA,EAAIE,EAAIG,IAAIpB,OAAQe,IAChC,GAAIG,GAAWD,EAAIG,IAAIL,GAAGM,KAAOH,GAAWD,EAAIG,IAAIL,GAAGO,IAAK,CAC1DH,EAAQF,EAAIG,IAAIL,GAAGQ,KACnB,OAIN,MAAOJ,GAGT,QAASK,gBAAeC,GAGtB,IAAK,GAFDC,MACAC,KACKZ,EAAI,EAAGA,EAAIU,EAAKzB,OAAQe,IAAK,CAClCW,EAAOE,KAAKH,EAAKV,GAAGc,OAGpB,IAAIC,GAAWpC,KAAKmB,IAAIkB,SAAS,KAAOA,SAASC,EAAE,OAASjB,GAAGkB,OAASR,EAAKV,GAAGM,MAAQI,EAAKV,GAAGO,IAAMG,EAAKV,GAAGM,MAC9GM,GAAOC,KAAKE,GAEhB,OACEJ,OAAQA,EACRC,OAAQA,GAIZ,GAAIO,SACFtC,cAAeA,cACfa,oBAAqBA,oBACrBO,eAAgBA,eAChBQ,eAAgBA,eAChBZ,mBAAmBA,mBAGE,oBAAXuB,SAA0BA,SACpCA,OAAOD,OAASA,QAGK,mBAAXE,SAA0BA,SACpCA,OAAOC,QAAUH","file":"engine.min.js","sourcesContent":["function toRadians(angle) {\n  return angle * (Math.PI / 180);\n}\n\nfunction calculateArea(arreglo) {\n  var areaActual = 0;\n  var angulo = 360 / arreglo.length;\n  for (var h = 0; h < arreglo.length; h++) {\n      var a = arreglo[h];\n      var b = arreglo[h + 1];\n      if (h < arreglo.length - 1) {\n          a = arreglo[h];\n          b = arreglo[h + 1];\n      } else {\n          a = arreglo[h];\n          b = arreglo[0];\n      }\n      var c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b * Math.cos(toRadians(angulo)));\n\n      var s1 = (a + b + c) / 2;\n      var area = Math.sqrt(s1 * (s1 - a) * (s1 - b) * (s1 - c));\n      areaActual += area;\n  }\n\n  return areaActual;\n}\n\nfunction calculatePercentage(areaActual,aristas) {\n\n  var areaTotal = calculateAreaTotal(aristas); // area total de 21 indicadores\n  return 100 - Math.abs(((areaActual - areaTotal) / areaTotal) * 100);\n}\n\nfunction calculateAreaTotal(aristas) {\n  var array = [];\n  for (var i = 0; i < aristas; i++) {\n    array[i] = 100;\n  }\n  return calculateArea(array); // area total de 21 indicadores\n}\n\nfunction calculateLevel(doc, p_total) {\n  var level;\n  for (var i = 0; i < doc.ask.length; i++) {\n      if (p_total >= doc.ask[i].min && p_total <= doc.ask[i].max) {\n        level = doc.ask[i].nivel;\n        break;\n      }\n  }\n\n  return level;\n}\n\nfunction calculateEdges(data) {\n  var labels = [];\n  var values = [];\n  for (var i = 0; i < data.length; i++) {\n      labels.push(data[i].titulo);\n\n      // se hace el calculo del procentaje para cada areista de la grafica radial\n      var calculo1 = Math.abs(parseInt(100 * (parseInt($(\"#ent\" + i).val()) - data[i].min) / (data[i].max - data[i].min)));\n      values.push(calculo1);\n  }\n  return {\n    labels: labels,\n    values: values,\n  };\n}\n\nvar engine = {\n  calculateArea: calculateArea,\n  calculatePercentage: calculatePercentage,\n  calculateLevel: calculateLevel,\n  calculateEdges: calculateEdges,\n  calculateAreaTotal:calculateAreaTotal,\n};\n\nif ( typeof window !== 'undefined' && window ) {\n  window.engine = engine;\n}\n\nif ( typeof module !== 'undefined' && module ) {\n  module.exports = engine;\n}\n"]}