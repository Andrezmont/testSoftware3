{"version":3,"sources":["index.js"],"names":["graficar","entrada","entrada2","Chart","defaults","global","legend","display","defaultFontColor","chartRadarDOM","$","chartRadarData","labels","datasets","label","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","pointBorderWidth","data","chartRadarOptions","scale","ticks","beginAtZero","maxTicksLimit","pointLabels","fontSize","gridLines","color","type","options","minmax","value","min","max","parseInt","isNaN","toastr","closeButton","debug","newestOnTop","progressBar","positionClass","preventDuplicates","timeOut","onclick","console","log","warning","document","ready","change","this","val","ajax","url","area","error","respuesta","success","remove","i","length","campoTexto","append","titulo","descripcion","eq","trigger","click","toRadians","angle","Math","PI","salida1","salida2","s","push","caluculo1","abs","arreglo","areaTotal","angulo","h","a","b","c","sqrt","pow","cos","s1","text"],"mappings":";AAqFA,QAASA,UAASC,EAASC,GACvBC,MAAMC,SAASC,OAAOC,OAAOC,SAAU,EACvCJ,MAAMC,SAASC,OAAOG,iBAAmB,mBAEzC,IAAIC,GAAgBC,EAAE,eAElBC,GACAC,OAAQX,EACRY,WACIC,MAAO,UACPC,gBAAiB,qBACjBC,YAAa,mBACbC,qBAAsB,oBACtBC,iBAAkB,mBAClBC,0BAA2B,mBAC3BC,sBAAuB,mBACvBC,iBAAkB,GAClBC,KAAMpB,KAGVqB,GACAC,OACIC,OACIC,aAAa,EACbC,cAAe,IAEnBC,aACIC,SAAU,IAEdC,WACIC,MAAO,SAKF,IAAI5B,OAAMM,GACvBuB,KAAM,QACNV,KAAMX,EACNsB,QAASV,IAQjB,QAASW,QAAOC,EAAOC,EAAKC,GACxB,MAAIC,UAASH,GAASC,GAAOG,MAAMD,SAASH,IACjCC,EAGHE,SAASH,GAASE,GAClBG,OAAOP,SACHQ,aAAa,EACbC,OAAO,EACPC,aAAa,EACbC,aAAa,EACbC,cAAe,mBACfC,mBAAmB,EACnBC,QAAS,OACTC,QAAS,WACLC,QAAQC,IAAI,qBAQpBV,OAAOW,QAAQ,wCAA0Cf,EAAM,IAAMC,EAAM,IAAK,eACzEA,GAEAF,EA7JnB,GAAIb,KACJZ,GAAE0C,UAAUC,MAAM,WAMhB3C,EAAE,SAAS4C,OAAO,WAMO,OAAlB5C,EAAE6C,MAAMC,OACV9C,EAAE+C,MACEC,IAAK,oBACL1B,KAAM,OACNV,MAAMqC,KAAOjD,EAAE6C,MAAMC,OACrBI,MAAO,SAASC,GACZZ,QAAQC,IAAIW,IAEhBC,QAAS,SAASD,GACdvC,KAAOuC,EACPnD,EAAE,mBAAmBqD,QACrB,KAAK,GAAIC,GAAI,EAAGA,EAAIH,EAAUI,OAAQD,IAAK,CACvC,GAAIE,GAAa,iBAAmBF,EAAI,gCAAkCH,EAAUG,GAAG5B,IAAM,UAAYyB,EAAUG,GAAG3B,IAAM,sDAAwDwB,EAAUG,GAAG5B,IAAM,KAAOyB,EAAUG,GAAG3B,IAAM,0BAA4BwB,EAAUG,GAAG5B,IAAM,IAChR1B,GAAE,gBAAgByD,OAAO,WAAaN,EAAUG,GAAGI,OAAS,YAAcP,EAAUG,GAAGK,YAAc,YAAcR,EAAUG,GAAG5B,IAAM,YAAcyB,EAAUG,GAAG3B,IAAM,YAAc6B,EAAa,cAEtMxD,EAAE,iBAAiB4D,GAAG,GAAGC,QAAQ,gBAYhD7D,EAAE,aAAa8D,MAAM,WAkCjB,QAASC,GAAWC,GAClB,MAAOA,IAASC,KAAKC,GAAK,KAhC5B,IAAK,GAFDC,MACAC,KACKC,EAAI,EAAGA,EAAIzD,KAAK2C,OAAQc,IAAK,CAClCF,EAAQG,KAAK1D,KAAKyD,GAAGX,OAErB,IAAIa,GAAYN,KAAKO,IAAI5C,SAAS,KAAOA,SAAS5B,EAAE,OAASqE,GAAGvB,OAASlC,KAAKyD,GAAG3C,MAAQd,KAAKyD,GAAG1C,IAAMf,KAAKyD,GAAG3C,MAC/Ga,SAAQC,IAAI5B,KAAKyD,GAAGX,OAAS,IAAMa,EAAY,KAC/CH,EAAQE,KAAKC,GAKjB,IAAK,GAHDE,GAAUL,EACVM,EAAY,EACZC,EAAS,IAAIF,EAAQlB,OAChBqB,EAAI,EAAGA,EAAIH,EAAQlB,OAAQqB,IAAK,CACvC,GAAIC,GAAIJ,EAAQG,GACZE,EAAIL,EAAQG,EAAE,EACdA,GAAIH,EAAQlB,OAAQ,GACtBsB,EAAIJ,EAAQG,GACZE,EAAIL,EAAQG,EAAE,KAEdC,EAAIJ,EAAQG,GACZE,EAAIL,EAAQ,IAEdlC,QAAQC,IAAI,IAAIqC,EAAE,KAAKC,EACvB,IAAIC,GAAId,KAAKe,KAAKf,KAAKgB,IAAIJ,EAAG,GAAKZ,KAAKgB,IAAIH,EAAG,GAAI,EAAED,EAAEC,EAAEb,KAAKiB,IAAInB,EAAUY,KAExEQ,GAAMN,EAAEC,EAAEC,GAAG,EACb9B,EAAOgB,KAAKe,KAAKG,GAAIA,EAAGN,IAAIM,EAAGL,IAAIK,EAAGJ,GAC1CxC,SAAQC,IAAI,MAAQqC,EAAE,QAAUC,EAAE,aAAeC,EAAG,aAAeJ,EAAO,WAAW1B,GACrFyB,GAAazB,EAEfV,QAAQC,IAAI,gBAAgBkC,GAC5B1E,EAAE,UAAUoF,KAAK,gBAAgBV,GAMjCpF,SAAS6E,EAASC","file":"index.min.js","sourcesContent":["var data; // variable que almacena los indicadores relacionados a un area\n$(document).ready(function() {\n  /**\n  * @autor:godie007\n  * @date: 2017/04/13 14:56\n  * En caso de que cambie la lista de seleccion de areas, se vuelve a cargar los indicadores relacionados a esa area\n  **/\n  $(\"#area\").change(function() {\n    /**\n     * @autor:godie007\n     * @date: 2017/04/13 14:48\n     * Se cargan los indicadores relacionados a una determinada Area\n     **/\n     if ($(this).val() !== \"-1\") {\n       $.ajax({\n           url: \"/account/grafica/\",\n           type: 'POST',\n           data:{'area':$(this).val()},\n           error: function(respuesta) {\n               console.log(respuesta);\n           },\n           success: function(respuesta) {\n               data = respuesta;\n               $(\"#tabla tbody tr\").remove();\n               for (var i = 0; i < respuesta.length; i++) {\n                   var campoTexto = '<input id=\"ent' + i + '\" class=\"input-medium\"  min=\"' + respuesta[i].min + '\" max=\"' + respuesta[i].max + '\" step=\"1\" onblur=\"this.value = minmax(this.value, ' + respuesta[i].min + ', ' + respuesta[i].max + ')\" type=\"number\"value=\"' + respuesta[i].min + '\">';\n                   $(\"#tabla tbody\").append('<tr><td>' + respuesta[i].titulo + '</td><td>' + respuesta[i].descripcion + '</td><td>' + respuesta[i].min + '</td><td>' + respuesta[i].max + '</td><td>' + campoTexto + '</td>' + '</tr>');\n               }\n               $(\"input:visible\").eq(0).trigger('focus');\n           }\n       });\n     }\n  });\n});\n/**\n * @autor:godie007\n * @date: 2017/04/13 14:06\n * Al momento de hacer click en el boton graficar se toma la informacion de los indicadores\n * y la informacion suministrada por el usuario para calcular cada arista de la grafica\n **/\n$(\"#graficar\").click(function() {\n    var salida1 = [];\n    var salida2 = [];\n    for (var s = 0; s < data.length; s++) {\n        salida1.push(data[s].titulo);\n\n        var caluculo1 = Math.abs(parseInt(100 * (parseInt($(\"#ent\" + s).val()) - data[s].min) / (data[s].max - data[s].min))); // se hace el calculo del procentaje para cada areista de la grafica radial\n        console.log(data[s].titulo + \":\" + caluculo1 + \"%\");\n        salida2.push(caluculo1);\n    }\n    var arreglo = salida2;\n    var areaTotal = 0;\n    var angulo = 360/arreglo.length;\n    for (var h = 0; h < arreglo.length; h++) {\n      var a = arreglo[h];\n      var b = arreglo[h+1];\n      if (h < arreglo.length -1) {\n        a = arreglo[h];\n        b = arreglo[h+1];\n      }else{\n        a = arreglo[h];\n        b = arreglo[0];\n      }\n      console.log(\"a\"+a+\",b\"+b);\n      var c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)- 2*a*b*Math.cos(toRadians(angulo)));\n\n      var s1 = (a+b+c)/2;\n      var area = Math.sqrt(s1*(s1-a)*(s1-b)*(s1-c));\n      console.log(\"a: \" + a+\" ,b: \" + b+\" ,lado C: \" + c +\" ,Angulo: \" + angulo+\" ,Area: \"+area);\n      areaTotal += area;\n    }\n    console.log(\"Area Total = \"+areaTotal);\n    $(\"#areaF\").text(\"Area Actual: \"+areaTotal);\n\n    function toRadians (angle) {\n      return angle * (Math.PI / 180);\n    }\n\n    graficar(salida1, salida2);\n});\n/**\n * @autor:godie007\n * @date: 2017/04/13 14:16\n * Funcion para hacer el grafico de Radar en base a informacion dinamica que llega por parte de las configuracionesque haga el cliente\n **/\nfunction graficar(entrada, entrada2) {\n    Chart.defaults.global.legend.display = false;\n    Chart.defaults.global.defaultFontColor = 'rgba(34,34,34, 1)'; //color del texto\n\n    var chartRadarDOM = $('#chartRadar');\n    // configuracion de la grafica\n    var chartRadarData = {\n        labels: entrada,\n        datasets: [{\n            label: \"Grafica\",\n            backgroundColor: \"rgba(156,63,74,.5)\",\n            borderColor: \"rgba(9,138,1,.5)\",\n            pointBackgroundColor: \"rgba(156,63,74,1)\",\n            pointBorderColor: \"rgba(9,138,1,.5)\",\n            pointHoverBackgroundColor: \"rgba(9,138,1,.5)\",\n            pointHoverBorderColor: \"rgba(9,138,1,.5)\",\n            pointBorderWidth: 0.5,\n            data: entrada2\n        }]\n    };\n    var chartRadarOptions = {\n        scale: {\n            ticks: {\n                beginAtZero: true,\n                maxTicksLimit: 10\n            },\n            pointLabels: {\n                fontSize: 12\n            },\n            gridLines: {\n                color: '#999'\n            }\n        }\n\n    };\n    var chartRadar = new Chart(chartRadarDOM, {\n        type: 'radar',\n        data: chartRadarData,\n        options: chartRadarOptions\n    });\n}\n/**\n * @autor:godie007\n * @date: 2017/04/13 14:02\n * Funcion para limitar el los campos de texto a solo el rango que este configurado en la seccion de indicadores\n **/\nfunction minmax(value, min, max) {\n    if (parseInt(value) < min || isNaN(parseInt(value))) {\n        return min;\n    } else {\n\n        if (parseInt(value) > max) {\n            toastr.options = {\n                closeButton: true,\n                debug: false,\n                newestOnTop: false,\n                progressBar: true,\n                positionClass: \"toast-top-center\" || 'toast-top-right',\n                preventDuplicates: false,\n                timeOut: \"1000\",\n                onclick: function() {\n                    console.log(\"Toco el Mensaje\");\n                }\n            };\n            /**\n             * @autor:godie007\n             * @date: 2017/04/13 14:31\n             * Plugin para mostrar Notificaci√≥n emergente de Advertenca\n             **/\n            toastr.warning(\"El valor deve estar en el intervalo [\" + min + \",\" + max + \"]\", \"Importante!\");\n            return max;\n        } else {\n            return value;\n        }\n    }\n\n}\n"]}